#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 12 12:43:08 2024

@author: marielle
"""

pattern="TATGAGCTA"
genome="GCGGAGAGAACATAAACTCTTATGAGCTATGAGCCGCAGATCTATGAGCGCTCTCCCAGCGGATCTTCAGGTAAAGTTATATGAGCAGTTATGAGCCGCGTAATCTAAATTAATATGAGCGTACGTTTATGAGCAAATATGAGCTTGAGGGCTATGAGCTATGAGCTATGAGCTATGAGCTATGAGCTATATGAGCACTATGAGCTATGAGCTATGAGCTGTATGAGCTGGAAACATATGAGCATGTTTATGAGCTATGAGCAATATGAGCAAAGAAATTATGAGCTATGAGCCATATGAGCGTATGAGCGTGCATATGAGCATATGAGCATATGAGCGCGCGGGTATGAGCTATGAGCGCTGTATGAGCTTATGAGCTATGAGCTATGAGCCTATGAGCTTATGAGCTATGAGCGGTATGAGCCCATTATGAGCGGATTATGAGCTATGAGCTCTATGAGCTATGAGCTATGAGCCGTATGAGCTATGAGCTCTATTATGAGCTGCCTTTCCTGTATGAGCTATGAGCTTGGCGAACTTATGAGCTTTATGAGCCTCGGCGTATGGCAGTATGAGCTATGAGCTATGAGCCTATGAGCATATGAGCGTATGAGCTAACAAATATGAGCGTATGAGCGATAGTATGAGCGATATGAGCGTATGAGCTTATGAGCAGTGCACTTTATGAGCCTATGAGCTTATGAGCTGCCTATGAGCAACTATATGAGCTATGAGCCGTATGAGCCTATGAGCATATGAGCAAGTTATGAGCATATATGAGCTAATATGAGCGCTATGAGCTCATATGAGCCACTATGAGCCATGTATGAGCTATATGAGCTATGAGCTCTTATGAGCTTATGAGCCTATGAGCGTATGAGCCCGTATGAGCTTATGAGCTCTATGAGCTATGAGCCTGAATATGAGCCTATGAGCCGGTATATGAGCCTCCTGATATGAGCACTGCACCCCTATGAGCTATGAGCGTGGGTATGAGCTATATATGAGCTATGAGCTATGAGCCTTATGAGCAGTATGAGCCCCTGCCTTATGAGCTTATGAGCTTATGAGCGGATATGAGCAATATGAGCTATGAGCGGTGGTGTATGAGCCTTATGAGCATATGAGCCTATGAGCGGGATTATGAGCCATATGAGCGTATGAGCTATGAGCAAACGGCTATGAGCGATATGAGCTATGAGCTATGAGCATATGAGCTATGAGCGGGTATGAGCTTATGAGCTATGAGCTGCTATGAGCAGTGTATGAGCCCTATGAGCGTCGGTATGAGCTGTATGAGCCTATGAGCCTATGAGCTATGAGCTATGAGCTCCGATCTATGAGCTATGAGCTATGAGCAATATGAGCTATGAGCTATGAGCCTCGTATGAGCCCATATGAGCATATGAGCTATGAGCATATGAGCGAGATTATGAGCGGTATGAGCTATGAGCTATGAGCTATGAGCACTATATGAGCGCTTATGAGCCTATGAGCCTATGAGCTTATGAGCATATGAGCTTGATATGAGCTTTGCTTATGAGCTATATGAGCTATGAGCAAACCTTTATGAGCTGGAGATTTATGAGCGCATATGAGCTGGAATATGAGCTACGTATGAGCATAGGTATGAGCTATATGAGCTTTATGAGCTTATGAGCAGCTACGTATGAGCTTATTGTATGAGCTATGAGCTATGAGCACCCTATGAGCATATGAGCGTATGAGCTTATGAGCACTATATGAGCCTTGCATATGAGCGCTATGAGCTTTATGAGCGTATGAGCTTATGAGCTATGAGCTATGAGCGAGACCTATCTATGAGCTATGAGCATTATGAGCGATATGAGCTATGAGCGCTATGAGCCTATGAGCCGGTATGAGCGCCTATGAGCATATGAGCGTATGAGCTGGTATGAGCTATGAGCTGGCATATATGAGCTCAATATGAGCTATGAGCTATGAGCTGGACTATGAGCATATGAGCTAAAGAGATGAGTATGAGCGGAGTATGAGCACCGTATGAGCGTAGCATATGAGCTATATGAGCTATGAGCCATCTGTGGGGTATGAGCGATATATGAGCCTCGCTATTATGAGCATTATGAGCTATGAGCCAGTATGAGCCCTATGAGCGTATGAGCAATGTATGAGCTATGAGCTGATTGTATGAGCCCGACATATGAGCACTATGAGCAAGATATGAGCTATGAGCATATGAGCTATGAGCCTCGGGACTATGAGCTATGAGCACCTATGAGCTATGAGCACAATATGAGCCCTATGAGCTCTAGTATGAGCTATGAGCGTATGAGCTATGAGCATATGAGCTATGAGCGCCTATGAGCAATTATGAGCACCTATGAGCACTATGAGCTATGAGCACGTTATGAGCGTATGAGCTATGAGCCATATGAGCTATGAGCTATGAGCGCTCGCCCAGATATAAACTATGAGCGATATGAGCCTATGAGCCGCCCTATGAGCTATGAGCGATATGAGCTTATGAGCTTATGAGCGTAGACACTTTAATTTATGAGCCTATGAGCATCAATAGACACGTGCTATGAGCTATGAGCTATGAGCTATGAGCTCTATATATGAGCCATATGAGCGGGTATGAGCTTGAAAGATGAGTATATGAGCTATGAGCTATATGAGCAACTTTGGGTATGAGCCTATGAGCTATGAGCCTGTGGTTTATGAGCTATGAGCACATCTATGAGCGTATGAGCTCTATGAGCCGGATAAGCCGTATGAGCTATGAGCGGCCTATGAGCTATGAGCTATGAGCTATGAGCTATGAGCCTTTATGAGCATCAGAATATGAGCTGCTATGAGCCTGCCAAGTATGAGCGTATGAGCTATGAGCTATGAGCCCAAGTTTTATGAGCTATGAGCGGCAATAGTATGAGCTATGAGCGCTATGAGCTTTTATGAGCTATGAGCTGTATGAGCGTATGAGCGTATGAGCTATGAGCATATATGAGCCCTATGAGCCAGCGTATGAGCGTATGAGCTATGAGCATATGAGCAATATGAGCCTATGAGCTATGAGCTGTTATGAGCCTTGCTATGAGCGGCTTATGAGCGTATCGGCTATGAGCCGTATGAGCTATGAGCATATGAGCTCGTATGAGCCCTTATGAGCCCTTATGAGCGTTGATATTGCGTGCCATATGAGCTATGAGCATATGAGCCAATATGAGCCTTATGAGCTTTCTCACATTTATGAGCGCATATGAGCAAGCGGTACTATGAGCGCTGCGTATGAGCCATATGAGCGTTATGAGCGTACCAGCCTGATATGAGCCTTATGAGCTGTCTGAACCTATGAGCGTATGAGCCTGCTATGAGCATTTTATGAGCTGGAGGTATGAGCCCTATGAGCATCTATATAGTATATGAGCAATATGAGCTCCCTCTGTATATGAGCTATGAGCTAGCACTGATATGAGCATGACTATGAGCTATGAGCCAGTATGAGCATATGAGCTATGAGCGCTGCTCTATGAGCTAGTTATGAGCAGTACCACCGGCCTATGAGCTTGGTTCTATGAGCGTATGAGCAATATGAGCTATGAGCCAATATGAGCCCTGGAATATATGAGCACTATGAGCTGTATGAGCGCTATTATTGTATGAGCGTATGAGCTATGAGCGTCTATGAGCTATGAGCTCTATGAGCGTATGAGCTATGAGCCAAACTATGAGCATCTGTATGAGCGTATGAGCCCTATGAGCTCATATGAGCCGATTATGAGCCCCGTATGAGCATATGAGCTATGAGCGTATATGAGCTCTATGAGCATTATGAGCGGAGGATAGTATATGAGCGCTATGAGCTATGAGCTTTTATGAGCTATGAGCATATGAGCTCCGTATGAGCCTTGCTATGAGCTGCCCATATGAGCTATGAGCCTTAGTCCTATGAGCCCTATGAGCTGGGTATGAGCTATGAGCCCTATGAGCATTATGAGCGAAATATGAGCCTATGAGCTATGAGCTATGAGCTATGAGCTATGAGCCTTATGAGCTTATGAGCTATGAGCACCTATTATGAGCTATGAGCCTCATATGAGCTTATGAGCTATGAGCTTATGAGCGTATGAGCAACAATCGCTTGATGTATGAGCTATTTATGAGCCTATGAGCTATGAGCTATGAGCAGTATGAGCGTTATGAGCGAAGCTAAGCTATGAGCGTATGAGCAGCTATGAGCCTATGAGCCTACTATGAGCACTATGAGCACTATGAGCAGCTGGGTTATGAGCTTATGAGCTTATGAGCAGGACTATGAGCTCTAGTATGAGCCGTATGAGCCTTTATGAGCTATGAGCTATGAGCTATGAGCTATGAGCTATGAGCTATGAGCTATGAGCATATGAGCTATGAGCGATATGAGCTATGAGCAATCAATATGAGCTATGAGCTCCCTATGAGCGAAAATTATGAGCAGTGTTATGAGCGATTATGAGCTGTCGACTATGAGCGTCTGTATGAGCGTCTTATATGAGCGCTATGAGCGCTCGTATGAGCCTATGAGCTATGAGCCGTATGAGCGTATGAGCCGATTTATGAGCATATGAGCATTATGAGCTATGAGCGTCTATGAGCGAATTATGAGCGAATATGAGCTAATATGAGCCTTATGAGCCTTATGAGCCATATGAGCATATGAGCACTATATGAGCTATGAGCAATATGAGCTATTTCTGTAAATATGAGCGCTATGAGCCCACCAATTATGAGCTATGAGCACTTAGTATGAGCGTATGAGCGATATGAGCTCTGTATGAGCGTATGAGCGCGAGCTATGAGCTATGAGCCATTATGAGCATTATGAGCTATGAGCTTATGAGCAATTATGAGCAAAAGATTATGAGCTTCTCGATACCCCTATGAGCTCCAAGTTATGAGCTATGAGCCGTATATGAGCTATGAGCTATGAGCCTTATGAGCTATGAGCGTATGAGCGATATGAGCTATGAGCTTATGAGCGTTATAGGTATGAGCTATGAGCTATGAGCGTATGAGCCTCCCCGCCCCTAGTATGAGCTCGGTATGAGCTATGAGCAGTATGAGCCTATGAGCGTATGAGCGAAATATGAGCTATGAGCTATGAGCCTGTTATGAGCTTATGAGCCATATGAGCCACACTATGAGCAAAATTATATTATGAGCGTATGAGCTATGAGCGTATGAGCGCCATATGAGCATTATGAGCACTGCTATGAGCTATGAGCGCCGAATGTATGAGCAATTCCTTATGAGCTGCTTATGAGCGTTTATGAGCCGGTATGAGCTGGTATGAGCCTATATGAGCGGAACTATGAGCATATGAGCTTATGAGCTATGAGCTGGTATGAGCCGTAAATATGAGCTATGAGCTATGAGCTGAATATGAGCAAATTATGAGCCTATGAGCTATGAGCGCTATGAGCCTATGAGCGGATATGAGCCTCGTTCCTATGAGCCTATGAGCGTATTATGAGCGATTTATGAGCACTATGAGCACTGGTATGAGCGCTATGAGCTATGAGCTATGAGCGCTCACCATATGAGCAGTATGAGCGTATGAGCCATCTCGTATGAGCGTATGAGCTATGAGCTATGAGCCATATGAGCGTCCTATGAGCTGGGGGAGTTATGAGCACTATGAGCACCCTTGCATATGAGCTATGAGCGGTTTATGAGCCAGGTATGAGCTATGAGCAGTATGAGCTCCTTAATTATGAGCTTATGAGCCAATATGAGCTATGAGCGTATGAGCCGTATGAGCAATTTATGAGCCATATGAGCTATGAGCTATGAGCGACCTTATGAGCTATGAGCGTATGAGCTACCAGTACTTATGAGCCTATGAGCAGTATGAGCTCATATGAGCAGTATGAGCTTTATGAGCTATGAGCTTGATATGAGCTATGAGCCAGTATGAGCGTATGAGCTCTATGAGCAATATGAGCTTTATGAGCATTATGAGCCGGATATGAGCTTATGAGCCCACCTATGAGCACTACCCATATGAGCTAGGTTATGAGCGTATGAGCTATGAGCGTATGAGCGGCCTATGAGCATATGAGCTATGAGCGATATGAGCGAATGTATGAGCCGAATATGAGCCTTATGAGCGACTCTATGAGCCTATGAGCTGTATTATGAGCGCGCTTGTACTTATTCATATGAGCGAGTATGAGCCACTATGAGCTTTATGAGCTTTATGAGCGTTTATATGAGCCTATGAGCTTTATGAGCTATGAGCCTATGAGCTGCGAATATGAGCTATGAGCTATGAGCGTATGAGCGAAGCTATGAGCTATGAGCTATGAGCTATGAGCATGTCTATGAGCATATGAGCCATATGAGCCTATGAGCCCACGAGTATGAGCATGGACGCATATGAGCTATGAGCTATGAGCTTATATGAGCTTTATATGAGCGTATGAGCATATGAGCCCAGATCGTATGAGCGTGTATATGAGCAGTATGAGCGATATGAGCTATGAGCTTTGCGCTAAACGTATGAGCATATGAGCGCGTATGAGCCTATGAGCCTTGTATGAGCGCTAATATGAGCTAGTATATGAGCAAATCTATGAGCTATGAGCTTTATGAGCTATGAGCATATATGAGCGTAATATGAGCTCGTATGAGCATATGAGCCATTATGAGCCGCCGACTATGAGCTATGAGCTATGAGCCTAGGCGCATATGAGCCTTATGAGCGTATGAGCTATGAGCCATATGAGCTAAGTATGAGCCTGCACGATATGAGCGCGTATGAGCTATGAGCTTTGTATGAGCCGGTGAATGTATGAGCATATGAGCTATGAGCGCTATGAGCTATGAGCCTCCTATGAGCAGGCTATGAGCGTATGAGCGGGTATGAGCACGAGTGATGAGCTTATGAGCGTATGAGCTATGAGCCCTATGAGCTGCATATGAGCAGCTATGAGCTGACAATATGAGCCGCATCTGCTATGAGCTATGAGCATATGAGCCTATGAGCTTATGAGCTTCTGTATGAGCACTTATGAGCTGCTTATGAGCTATGAGCTATGAGCTTTGTAGTATGAGCAGGTATGAGCAGTATGAGCCCTATGAGCGTCGTAGGCTATGAGCACGGTATGAGCACTATGAGCACTATGAGCTATTATGAGCGAGATCCATATGAGCTATGAGCTATGAGCCTATCCTATGAGCTTAGACTGGTATGAGCGTATGAGCCAACAAACTATGAGCTTATGAGCGCTATGAGCTTATGAGCCACGAGTATAGATGTTATGAGCAGCTCCTATGAGCTTTATGAGCCTATGAGCATTATGAGCGTATCTATGAGCTCATATGAGCGTACAAGTATGAGCCGGATGCTATGAGCTTTATGAGCCTTATGAGCTATGAGCGCTTATGAGCATGTATGAGCCCGCCGTATGAGCATTATGAGCTCTATGAGCCTCACATATGAGCCTATGAGCGTATATATGAGCTTATGAGCGTATGAGCTATGAGCTGTATGAGCTATGAGCCAAGTATGAGCTCTCGGCACTATGAGCTCCAGTATGAGCATATGAGCTATGAGCTGCACTCGTATGAGCGTCCGTCCATATGAGCGTATGAGCTATGAGCGTAAACTATGAGCGCCGTATGAGCGTATGAGCTATGAGCTATGAGCTTATGAGCTATGAGCATATGAGCTATGAGCGTTATGAGCTTGGTATGAGCCGCGAGGAGTATGAGCTCTATGAGCTATGAGCACCAGGAGTCGAGTTGATTTTTTATGAGCAGTATGAGCGCCTATGAGCTATGTGATTATGAGCTATGAGCGTGGGATTATGAGCGTTTATGAGCACAATATGAGCTGGGGATATGAGCGGTGTATGAGCTATGAGCTATGAGCCAGGATATGAGCTTATGAGCTATGAGCTATGAGCCTATGAGCTATGAGCTATGAGCCGCAAGCGTATGAGCGGAAATTATGAGCCTTTATATGAGCTATGAGCTGCCTATGAGCCGCATACTATGAGCGATTATGAGCGTAAGCCACCCGAATGTCCTACTTATGAGCCATATGAGCCGAGTTATGAGCTTCCCGTATGAGCTATGAGCGTATGAGCTATGAGCCCGTCTATGAGCTATGAGCGTATGAGCTATGAGCGCTGGACTATATGAGCATATGAGCTAGCTGACTATGAGCTATGAGCTATGAGCTTATGAGCGTGTATGAGCTTATGAGCGGATCATATATGAGCTGGCTATGAGCATATGAGCTATATGAGCCACCTATGAGCACATATGAGCACTATGAGCATATGAGCTATGAGCGACGGTATGAGCAAATATGAGCTAGTATGAGCCTATGTGTTATGAGCTTTCTATGAGCTATGAGCTATGAGCGAAATCCTATGAGCATATGAGCCACCTATGAGCCGACTTCCGCTTATGAGCGATATGAGCGTTATGAGCTTTATGAGCTATGAGCTGCAATTTCTCGCGCTTTACTATGAGCGTATGAGCTATGAGCCCTCCCTTATGAGCGGGTTTATGAGCTATGAGCTATGAGCCCTATCAGTATGAGCCGAGTATGAGCGGTTATGAGCTTATGAGCTATATGAGCTATGAGCTCCCTATATGAGCAACTTATGAGCGTATGAGCGGTATGAGCGTGTATGAGCTATGAGCAATTTACTTATGAGCTATGAGCACTGATTTTATGAGCTATGAGCTAAGTATATGAGCCTATGAGCTATGAGCTATGAGCTATGAGCCTATGAGCTATGAGCATATGAGCGTGATCTCTGTATGAGCTATGAGCTATGAGCACTATGAGCAGTATGAGCGCGTTAATATGAGCTGGTCTATGAGCGTGTATGAGCTATGAGCAGTATGAGCCTTATGAGCGTATGAGCCTCGAGCGGGATATGAGCTATGAGCAGGACATGTATGAGCTATGAGCTATGAGCTTATGAGCGAGTATTATGAGCATATGAGCTCCTATGAGCTGACCTATGAGCGTATGAGCTATTATGAGCCAACTCGTATGAGCAAATCTATGAGCATATGAGCGGATGTATGAGCGTATGAGCTTATGAGCCTTATGAGCTATGAGCCCCGTCCACTAGTGTATGAGCTACGCCAGAAGAGTATGAGCTTATGAGCTATGAGCGTTATGAGCTATGAGCTTATGAGCATATGAGCTATGAGCTTATGAGCTTATGAGCTATGAGCGGCAATATGAGCACGTGCACCCCTATGAGCTATATGAGCGTATGAGCGTATGAGCATCGGGCTATGAGCGGTTATGAGCTATATATGAGCTAGTGTATGAGCGAACCTATGAGCCGAGAATGTATGAGCTTTGTATGAGCCCGTATGAGCATGTTATGAGCATTGTAACTATGAGCTTATGAGCTCCTTATGAGCTATGAGCTTTCCGTATGAGCGGGAGTATGAGCGATATGAGCCGATGGAGCGGCTATGAGCTCGATGTATGAGCCGATGGTATGAGCAGTTCTATGAGCTTTATGAGCTAGCAGTAGCTTATGAGCCTATGAGCAATATGAGCACATGTATGAGCGCTGATATGAGCGGATATGAGCTGCAGTATGAGCTTATGAGCTATGAGCGTTATGAGCTATGAGCTATGAGCTATGAGCGCTATGAGCGTCCAGTATGAGCTATGAGCTATATGAGCGTATGAGCAGTATGAGCGATATGAGCGGGGACATATGAGCTATGAGCTATGAGCATATGAGCTATGAGCTATGAGCGAGTATGAGCACGGCGTTTATGAGCTATGAGCCCAATCTATGAGC"

# My original code
# def PatternIndexFinder(pattern, genome):
    # for i in range(len(genome)+1):
        # kmer=genome[i:i+len(pattern)]
        # position=[]
        # if kmer==pattern:
            # position.append(i)
        # return position
    
# Fixed code
def PatternIndexFinder(pattern, genome):
    position=[]
    for i in range(len(genome)-len(pattern)+1):
        kmer=genome[i:i+len(pattern)]
        if kmer==pattern:
            position.append(i)
    return position
        
pattern_index=PatternIndexFinder(pattern, genome)
print(*pattern_index)
        

