#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 12 12:59:38 2024

@author: marielle
"""

genome="AGACGTTTGCCCACAAGATCACTGACGAATTCATTCAAATGACGAATTCAATTTCGCTAGTGACGAATGACGAATTCACAGTGGACTTATGAAAGCGACATCATTAATCAAGATTGGGCCCGTGACGAATTCATCCTGACGAATTCATGACGAATTCACGAATTCATGACGAATTCACGAATTCAACCACAGTCTCAAACGAATTTCGTCGACTGGCTTGACGAATTCACGAATTCAGCGCTAGCAGATGTGGGCCCGTTGACGAATTCATCTGACGAATTCAGACGAATTCAGACACGGGGGGTCCTGAGCTTCGGTTGATCATGATGACGAATTCAAAGAGTTGGTGTGACGAATTCACGAATTCAGACCTGACGAATTCATGACGAATTCAGACTGTTCCGCGGTCTGCCAATTGACGAATTCAAATTCAAATGACGAATTCAAATTCACTACTCATGACGAATTCATCCGCGGGCCTCCATCAGGCCGCACATCCTGACGAATTCAGTGACTGACGAATTCACTTGACGAATTCATAGATCGGAGAGAACAGCGTTCTCCACCGGTGACGAATTCACGAATTCAACGAATTCAACCCCTGCCTGTGTTTATTGCTACACCATTGTACCTCTGCCTCAGCGCTGGCATACCAAACCGCAAGGGAACGCGCCCAGATTCGTTGTTTGGACCAGCTCTGGCGTATGGCGCCCTCCACAATATTTGTTAACAGTTATGAGGTGAACAATGCTAGTTCGTTGTCTGTTCATGGCAGTAACAACTCCCGTAAATCCCTGATATTACTAAGAATCTGTTACATTCAGCTAATTAGAGAACCCCTAGCGGAACCAACCCCACGTGGACGTTAAGGGGCTCGTCGAATGCTTCCGAAACTTTCCCCAATTTTGCACTTATCACAGCTCCAGTACAACAACACACCTTACCAACTTATAGTTGGTACGTGTAGAGCACTATTGGCGTCCAATGGCACGGTATTTCATAACACTTCTCGATTGCAAGCAATGCTATCCCCCTCCACCAAGGTCGTGACTGTTTGCCAGCATTGTGTCAACGTTGCCTCGTACCTTCAGAATGGGCCAGGTAGAAATAGTCGTCGCCACATATATTGCAGTGTGCATGCGGCGCATTGTCTATCATCTGTTGATGAAATTTAGGTGGAACATTTCGTTCGCGAGCCCAACCCCAGGTGCACCTCTATCATCAGGTTCTCGGACTGAGCAGTTAATTGGCATCTCCACTTCACTAACGCTGGGCGCGCGTTTCGTGACGATACTCAAGTATATCGAGTGGGATGAATGAGGGCCTCTCCTGCGGCCGCTCGGACTGGTGCTCTTGCCCCCGTGTAGTTCTGTACCTCGAAGGATAGTTCTAGTTACATCTCATTACATCGCAGTAACCCGCCCGGGTTGCTCTCAGCGCAAGCCAAGGATCTTGTCGTTCGTCCTTCTCAGTTGGGAAATGGACTGTCCGGCTCTAGTGCACTAGCTGCCCCCTGCGTTGGTCGCCTCACCAAAGAAGCCACTGCGTGCCGATAGTAACTGTTAGCCGCGTATGTCTATAGCCATCAACCTCTCACAAGGACCTGGTTAGCGCATGAGCTTTAGGAGTGAATTGCCATTGACCGTGCTACGAATAGCAACGAGCCGAATATACTGCCAAGTGATCATCTGAATGTGAGACCCTATACCCGGTTCACGTATATGCGCGAAACGGGTGAGACTACTACATTTCGCGTACGCTGGTTTACCTTTATAACATCCTGTACGAATCGTAGGTACGTTGAGGGCATTCCTCGCCGGGAGGGACTTCAGACGGTTTATTCCACCGCTGACATTTTAAGGGTGCATATAGGTTGCAGAGGAGCTGGGCCGCCTACCATGGGCTGAGGTCTTCCACCACAGCCACCGATCGCTTTCTAGACAACACGGGCGACCGCAAGCACGGTGGTAATGCCGGGTCTCTATGGTTCACTAGGACTTGGGCAATGTAGGACTGTCTCCGTGCGCTCAGTGTCCATAGGAGGCCGCGCCCGCCTCACCCGACCTCGGCGTTATGTGACGGCCCTATGATGTTTGCGGACCTAGATGGCGAGACCTCTACGGTTGCACTACATATTAACCGTTGAATGCGCATTGTCATACCCGTGGCTATGCCCAACCCGTTTTGCTCCTGTTTCCGGATGAGTAGCCAGCTGCGCCAGGGGCTGTTTCCCTGAGCTACTGGATCGCTTGAACGCTGCTCTATGCAAGGTCCGTGGCAAAATCAAATTAAAAAGTGCCCCGATGCCCCTAGTGAAATTCTGTAAGCATAGAGACTACTATGACTTCCAAGAGGGCCTCACAACCATGTTTGTCTTCGAGCCTATCAACAGTGATCTATTCACTAAGTGCCCACATGCCCTCCAGAACAAGGCACCAGACGGTGTGCTCAGTAAGGTCTTGTATAGGGGACTATGCTCGTAAAGAAGACGTTGGTCTTTATTGAAACCATTGGGAATCTGTGTCCAAGCCACATTATCCTACCGACGCGCTCTACTGAACCATAACAGAAGACCCTGTAGTCTAGTCGTATTCGGTGATAAGACGCATATGGGGGGGCGACAGACAGTCTAGAGGGCCCGCGCTAGCTAGAGGGCCCGCCGACTAGAGGGCCCGAGGACCTAGAGGGCCCCGCATGCAGAAACGCGTCTACTAGAGGGCCCCTAGAGGGCTAGAGGGCCCTAGAGGGCCCTGCATGATCTAGAGGGCCCTCCTAGAGGGCCCGACCTTAGGGCAGGTAACGTTACTTCTTTCCTAGAGGGCCCCATAGTCTCTAGAGGGCCCGGGCCCTCTAGAGGGCCCCTCCATATCTAGAGGGCCCGACACTGCGTGCTAGAGGGCCCTAGAGGGCCCATCTCTCGCGAGTATGGATCTAGCTAGAGGGCTAGAGGGCCCTAGAGGGCCCTAGCCTAGAGGGCCCTCGAACAAACTCTACAGTAGAGTGCTAGAGGGCCCTGTCTATCGTTCTAGAGGGCCCCAGTGGAGCGGAGCCGAACCCTAGAGGGCCCCTGGCTGTTACGTGGACTCCTAGAGGGCCCTAGAGGGCCCGGACATTCTAGAGGGCCCCGTGATCCTGCCCTAGAGGGCCCTAGAGGGCCCCGGGACTTTTTGTAACGGAACTGTATCATAAAGAATCCCCTAGAGGGCCCCCTCCCCGTACCCTGGCCTAAGGCGTCGGCCAGCGGTCATAGGAATCGTAGTAATTCCGCACATATGACATGGGAGAATAAGGCCTCGCTATTTGATCCTAGGAGGCAGCCTGACCAGGCCGATAGTAGGTATCCTGGCTGGACCTTATCCTGGCTGGACCTCTGATGAGCCCGTCTGGCTGGACCGATAATTTTCTGGCTGGACCCTGCGAAACCCTGGCTGGACCGGTATAGCGACAGCCCTGGCTGGACCGAACATTGGACGAAGGAGTTCCCTGGCTGGACCGGCGTCACCCTGGCTGGACCTTCCTGGCTGGACCGCTGGACCTGAGTTGGCTGGCTGGACCCGGCATTTCCACCCCTGGCTGGCTGGACCCACAGGACCTCTGGCTGCTGGCTGGACCCCTGGCTGGCTGGCTGGACCCAGCTGCTAACCTCTGGCTGGACCTGTCGAAGGCTTCTGGCTGGACCTTGGGAACCTGGCTGGACCTCGCCATACTTGGCTGGCTGGACCATAGGGGCCGTCTGGCTGGACCCTTTCCCGAGCCCTGGCCTGGCTGGACCTGGCTGGACCGCAACGGAAACGCTGGCTGGACCACCAACGTCTATGTATCGTTGCGCGTTGCTGCTGGCTGGACCTTTCTCTGGTCCGTACTGGCTGGACCCTGGACCTTAAGACTGGCTGGACCGGTACAATACTGGCTGGACCGACCGGCACGAGACGCGGCGATAACAGCTATCAAAAACATGTTAGGAAGACCTGGTATTTTCAGTTTTTTATCCTATGTGCAAGTTTTGGTCAGAATCGACTCGTCTTTGAGGCTATCAAAATCGTCAGATCACTGGTTAGTGCAAGATCTTGAGGGGTCACTTTTTCACCACCGAGCAGCCAACCTGTGATAAGGAACCCGACTGTCTAGGGGTCACTTGCCTCATTGGAGTGTGAGAACCCGACTGTCGAACCCGACTGTGTCAACCCGACTGTAACCCGACTGTCCGACAACCCGACTGTGTTGTACTGTCAGGGGTAACCCGACTGTTTAACCCGACTGTACCCGAAACCCGACTGTGGTCACTTAGGGGTCAGGGGTCAAACCCGACTGTGAACCCGACTGTACTAACCCGACTGTCCTTTGAGACTAATATTAACCCGACTGTTCGACAAAACCCGACTGTAGTACAACCCGACTGTACTTAGGGGTCACTTACGTATAACCCGACTGTCTGAAAACCCGACAACCCGACTGTTCACTTTGCCGGGCGTTGAACCCGACTGTGATAGGGGTCAACCCGACTGTCAGGGGTCACTTAGGGAACCCGACTAACCCGACTGTAGGGGTCACTAAAACCCGACTGTTTTTTAATGGAACTCTTAGTGCTAGTAGGGGTAAAACCCGACTGTTGGTCACTAACCCGACTGTCTGTGTCAACCCGACTGTGGGGTCAAACCCGACAACCCGACTGTCCCGACTGTACGGCCTATATTCACACCCGGAGCGTATAGATCGTTTAGATAGGGAACGCAACTTCATGCGCGTTGCAAATCACACTACGCGTGAATATAGGCGAGCGGCTAAGATACGAATCGGTGCATTAGCCACACCAATCACACTGCTGTAAAGGGGGGTAAACGATTCCATGAGATCGTCACGCGACTATCGCACTTGAAACCTCCCTCTCCGAACTCAGGAGCTTGATCAACTTATTCATATCTCCTCCCTCTTTAGGCCCGTAAAGGCGGAGCCCGGATGTAGAGCGGACCTCCACAACTGGCGCCTTTTCCACGTCGTTTTTTAACAGATCCATTCTGGCGAACATTACTCGAACAGAGTAACAACACAAAGGCAGGCGCATTGGCTGCACTCCACGCCGAGACCGACCGTTGTCAATGTCAACGAACATAGAAAGCAAGGCGTATGCGGACTATGACACACAATTTTTCCGGATGTGGCGATGGCGGCCGGGCCAGAGTTTAGTGGCGCTGAGTAATTGCGCTCAGTCTAATTCGGGATGCAAGAGGATAATGTCAATCAGGCTGCGGCTGGTGCACGGAATCCAATGGAGCAGACACATATACTCGGGAAACCCAATACGGGCATCCCGCTAGGAGAACCGGATTCGAACGGCGCTTCAAGACCAGATCAGAGAGTCTACAGTGGTGTAAATCTAAGCAAGCAGTTACTTACATGTTATAGCCCGACATTCTGAAGTATATGGCGGCGGCGTGGTGTTTTGAGACTTTCTTGGAGACCGCGCCCGAAAGGACTCTTGTATTATTATCCGGTGTTGGTTCCTCGCCTCGGTGAAAATGCTTGGAACAAAAGTACCGGAGAGACCCCTGAGGAGGAAAGATTGTCAAGGGGACGTAGCGTCAACCGTTTTCTCAGCTCTAAAGTATCAAGATCATCGCCAATACGTAGAAACGCGTAGGCGTATTCTGTAGTACGTCCATCCGGGATCCAGTTGTCTTATGTATTGCACCAGTCGAAAAAGGAAAACACGAACTCTATCTTTCTACAAGTCAGTACGGCTCGGTGGATGTACACTCGAGCTCTTATGGCCTTTTTCCGAAGTAGTCCGGAATACACTTTGTAGGTAAGGTTTCACTCAGCCTTTTGAATCAGATCGCGAAGAGAGGTAAAAAGGTCCCTTATGAGACGCGCGTGTGACGCTCGTGCGTGAAACTCCTGAGTGAATCAACGCTATACCACTCCACTCGGCTATACCACTATACCACTGAGACCTGCTATACCACTGAGTATTCCGAACGAGGGTGCGGATTATTTTCCCGCTATACCACTTGGCTATACCAGCTATACCGCTATACCACTGCAAGCTATACCACTGAAGCTATAGCTATACCACTGTCTGGTGGAGGAGAGGGTGGCCGCTATACCACTGGCTATAGCTATACCAGCTATACCACTGCTATACCACTGCTTAGCTATACCACTCATGCCTCAATCTTATCACTGTGACCAGCTATACCACTATGACGAGCAGCTATACCACTCCGAACGGCTATACCACTTCTCGTTCGCACCGCTGGTGGTTTTGTGGATGCGAGTTTGCTATACGCTATACCACTACTCCTAGTCAAAGCACTGCTATACCGCTAGCTATACCACTTGCTATACCACTTCGGGCTATGCTATACGCTATACCACTCACTACTTATGAAGCTTTATCATCCTCGACGAGTAGCAAAAACTCGCTATACCACTATCTTAAGCCTAGTCCTAGTCACCGCATCGCTATACCACTGCTATACCACTACCACTTGCTATACCACTGAAGCTTTATCATCATCTAGTCACCGCACCGCCCTAGTCACCGCCTCCGTCTCGGGAGTGGAGTGAGCTAGTCACCGCAGGTCTTTAGGTATCTAGTCACCGCGCGGTATTCCCTCCCTACTAGTCACCGCTGAAGCCTAGTCACCGCAGCTTTATCAGTGAGGTCTTCACTAGTCACCGCAGGTCTGGAAACTCGGTGAAGAGCTAGTCACCGCGCTGGAAGCTTTATCTTATCAGAAGCTTTATCTTAGCTAGTCACCGCAACTAGTCACCGCAGGTCTGTCTTACTAGTCACCGCTTTATCTGGTCCCCGCAAGGCTAGTCACCGCCCTAGTCACCGCAAGCTAGTCACCGCTATCGAAGCTAGTCACCGCGAGGTCTCGTGAGTGACTAGTCACCGCAGTCACCGCCTCAGTACAAGGGTGGAGTGAGGTCTGAGGTCTTCCTAGTCACCGCCGCACGAGTGAGGTGCTAGCTAGTCACCGCTCTAGTCACCGCCCGCTCACCGCAGTCACCGCGCTAGTCACCGCATATAAAAGAGGAGTGAGGTCTCGAGTGAGGTCTACTAATTAGAAAGACGATTAACACGGAGAGTGAGGTCTGGCTACGAGTGAGGTCTCTATGAGCCTCGATCGCAGTGGCTGTGCAAGTGGTTAGTGCCAGGAGATCAATACGAGGCTTACGGGATTACCGCGCTTGCCTGCTATCTGGGCGTGAACTACCTTAGTGGATTATGTCCACGAGCGGGACCTTTATCACATGCAGACAACAAGGGTCAGTTGGAAAGTTTCATGCCGCCCTCTTCGTACAGCATTCCTGTTGCTGAGTGACCATACCAGTAGTTGCAAGGCGTGGGATTGACCACGTATTAGTGACCTAGCTGAAATCAGTACGGCAGCGGTCCGGTATTTCGATGATATGTTACGAGGCTGACATGATGTTTGTGTATAGTCCTAAGACCAGCTAGGTCTTCTTACAGGACCTGTAGATATCGCTTGTGGCACTATACGATGCGAAAGTCTAGTTGATGAACCGACGTTTGATAGAGAGGTATCAAGCTAAGGTGTACTGAGGTATCGCGAGCGTGCGGACGCGTAGGGAGTCGCGACACGATCATAATCACTCGAAAGTGTGTTAGGTTGTTTCGCACTCGCAGCGGTTGACACAGACATGATCAAGTTAAGATGCTCACGTTATGTCCGTGAACTGAAGAAATACGCCCACGTTATGTCTATGTCGCATTGAGACACGTTATGTCACGTTATGTCCGACCGTAAGCTACTAGCACGTTCACGTTATCACGTTATGTCTAGTCCTCCAACACGTTACACGTTTTAGGATCACTGTTATGTCTCAATCACATAGGATCACTGATGTCCGCCGTGTCGCCGTGTGTAGTTAGGATCACTGTGTCGGCGAACACGTTATAGGATAGGATCACTGTGAATCGCCGTGTGTTAGGATCACTGCTAGGATCACTGTTCGCCGTGCACGTAGGATCACTGTAGGATCACTGGTCCTAGGATCACTGTGTGTTAAGCACGTTATGTCTAATCTAGGATCACTGTTAGGATCACTGCGCCGTGTGTAGTTAGGATCACTGCCGTGTGTCATAGGATCACTGGTTGTCGCCGTGTGTGGTTGTTAGGATCACTGGATCACTGTGTCACGTTATGTCGCGCGTTAGGATCACTGATCACTTAGGATCACTGCACTGCACTGACTGTCATAGGATCACTGGTTCGCCTTAGGATCACTGCCTTAGGATCACTGATCATTAGGATCACTGCACTGGTAGGATCACTGTGTGTACGGTATTAGGATCACTGGACGAGGCAGGCAGGTCGCCGTGTGTAGGTACGGCTCGCCGTGTGTCGCCGTGTGTGTTGAGCCTGTATCGCCGTCGCCGTGTGTGCTGACGTCGCCGTGTGTCCGTGTTCGCCGTGTGTAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGAAGATCGCGGGCTCGCGGGCAGAGATCGCGGGCATCGCAGATCGCGGGCCAGATCGCGGGCGCCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCAGATCGCGGGCGCGGGCAGATCGCGGGCAGATCGCAGATCGCGGGCGCGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCAGATCGCGGGCTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTTCTCCATTGTTGTTTCTCCATTCTCCATTGTTCTCCATTGTATTGTTTCTCCATTGTTTCTCTTCTCCATTGTCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCTTCTCCATTGTCATTGTTTCTCCATTCTCCATTGTTTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGTTTCTCCATTGT"
k=11
L=547
t=20

# My code

# def ClumpFinder(genome, k, L, t):
    # kmer_dict={}
    # for i in genome[i:i+L]:
        # kmer=genome[i:i+k]
        # if kmer not in kmer_dict:
            # kmer_dict[kmer]+=1
    # return kmer_dict
    # t_times_appearance=[]
    # for k,v in kmer_dict.values():
        # if kmer_dict.count() >= t:
            # t_times_appearance.append(k)
    # return t_times_appearance

# Fixed code - with annotations and understanding
def ClumpFinder(genome, k, L, t):
    kmer_clumps=[]
    for i in range(len(genome)-L+1): # This starts a sliding window of 75
        window=genome[i:i+L] # This defines the current window that we are going to work with
        kmer_dict={} # kmer dictionary in that window
        for j in range(len(window)-k+1): # Now we are working in the window
            kmer=window[j:j+k] # This sets the kmer in the window
            if kmer not in kmer_dict:
                kmer_dict[kmer]=1 # Initiates the count
            else:
                kmer_dict[kmer]+=1 # Adds 1 if it is already present
        for kmer, count in kmer_dict.items(): # Counts the items that are greater than or equal to t
            if count >= t:
                if kmer not in kmer_clumps: # This avoids duplicates
                    kmer_clumps.append(kmer)
    return kmer_clumps
    
        
# Want to go through windows of 75 and append the counts of each kmer to a dictionary
# And then go to the next window of 75 and do the same thing$
# Then at the end, take all the kmers that appear 4 or more times in the genome

clump_finder=ClumpFinder(genome, k, L, t)
print(*clump_finder)

# I had the right idea 
    
    